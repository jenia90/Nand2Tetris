class Player
{
    field int pos_x, pos_y, loc, last_dir;
    field int vSpeed, hSpeed;
    field int memAddress;
    field int MAX_SPEED;
    
    
    constructor Player new(int x, int y)
    {
        let pos_x = x;
        let pos_y = y;
        let vSpeed = 0;
        let hSpeed = 0;
        let last_dir = 1;
        let MAX_SPEED = 5;
        
        do Move(0);

        return this;
    }

    method void Move(int dir)
    {
        var int x, y, new_loc;

        do EraseShip(loc);
        if (~(dir = 0)) // if direction key was pressed update speed in that direction
        {
            if(dir = 2)
            {
                if (vSpeed > -MAX_SPEED) { let vSpeed = vSpeed - 1; }
                let new_loc = UpdatePositon();
                do drawUp(new_loc);
            }
            if(dir = 1)
            {
                if (vSpeed < MAX_SPEED) { let vSpeed = vSpeed + 1; }
                let new_loc = UpdatePositon();
                do drawDown(new_loc);
            }
            if(dir = 3)
            {
                if (hSpeed > -MAX_SPEED) { let hSpeed = hSpeed - 1; }
                let new_loc = UpdatePositon();
                do drawLeft(new_loc);
            }
            if(dir = 4)
            {
                if (hSpeed < MAX_SPEED) { let hSpeed = hSpeed + 1; }
                let new_loc = UpdatePositon();
                do drawRight(new_loc);
            }
            let last_dir = dir;
        }
        else // in case no direction change was made update the location
        {
            let new_loc = UpdatePositon();
            if(last_dir = 1)
            {
                do drawDown(new_loc);
            }
            if(last_dir = 2)
            {
                do drawUp(new_loc);
            }
            if(last_dir = 3)
            {
                do drawLeft(new_loc);
            }
            if(last_dir = 4)
            {
                do drawRight(new_loc);
            }
        }
        let loc = new_loc;

        return;
    }

    method int GetX() { return pos_x; }
    method int GetY() { return pos_y; }

    /**
    * Gets the update location for the ship
    */
    method int UpdatePositon()
    {
        var int new_loc;
        let pos_x = pos_x + hSpeed;
        let pos_y = pos_y + vSpeed;
        
        if(pos_y < 32)
        {
            let pos_y = 220;
        }
        if (pos_y > 220)
        {
            let pos_y = 32;
        }
        if (pos_x < 32)
        {
            let pos_x = 480;
        }
        if (pos_x > 480)
        {
            let pos_x = 32;
        }
        
        let new_loc = (pos_y * 32) + (pos_x / 16);

        return new_loc;
    }

    method void dispose()
    {
        do EraseShip(loc);
        do Memory.deAlloc(this);
        return;
    }

    method void drawLeft(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 15872);
        do Memory.poke(memAddress+96, -5760);
        do Memory.poke(memAddress+128, 13920);
        do Memory.poke(memAddress+160, -5736);
        do Memory.poke(memAddress+192, 13926);
        do Memory.poke(memAddress+224, -5735);
        do Memory.poke(memAddress+256, 13926);
        do Memory.poke(memAddress+288, -5736);
        do Memory.poke(memAddress+320, 13920);
        do Memory.poke(memAddress+352, -5760);
        do Memory.poke(memAddress+384, 15872);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void drawUp(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 256);
        do Memory.poke(memAddress+32, 640);
        do Memory.poke(memAddress+64, 640);
        do Memory.poke(memAddress+96, 1344);
        do Memory.poke(memAddress+128, 1344);
        do Memory.poke(memAddress+160, 2720);
        do Memory.poke(memAddress+192, 2720);
        do Memory.poke(memAddress+224, 5456);
        do Memory.poke(memAddress+256, 5456);
        do Memory.poke(memAddress+288, 10920);
        do Memory.poke(memAddress+320, 10920);
        do Memory.poke(memAddress+352, 13656);
        do Memory.poke(memAddress+384, 10920);
        do Memory.poke(memAddress+416, 16376);
        do Memory.poke(memAddress+448, 5456);
        do Memory.poke(memAddress+480, 5456);
        return;
    }

    method void drawRight(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 124);
        do Memory.poke(memAddress+128, 407);
        do Memory.poke(memAddress+160, 1644);
        do Memory.poke(memAddress+192, 6551);
        do Memory.poke(memAddress+224, 26220);
        do Memory.poke(memAddress+256, -26217);
        do Memory.poke(memAddress+288, 26220);
        do Memory.poke(memAddress+320, 6551);
        do Memory.poke(memAddress+352, 1644);
        do Memory.poke(memAddress+384, 407);
        do Memory.poke(memAddress+416, 124);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void drawDown(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 2728);
        do Memory.poke(memAddress+32, 2728);
        do Memory.poke(memAddress+64, 8188);
        do Memory.poke(memAddress+96, 5460);
        do Memory.poke(memAddress+128, 6828);
        do Memory.poke(memAddress+160, 5460);
        do Memory.poke(memAddress+192, 5460);
        do Memory.poke(memAddress+224, 2728);
        do Memory.poke(memAddress+256, 2728);
        do Memory.poke(memAddress+288, 1360);
        do Memory.poke(memAddress+320, 1360);
        do Memory.poke(memAddress+352, 672);
        do Memory.poke(memAddress+384, 672);
        do Memory.poke(memAddress+416, 320);
        do Memory.poke(memAddress+448, 320);
        do Memory.poke(memAddress+480, 128);
        return;
    }

    method void EraseShip(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
}