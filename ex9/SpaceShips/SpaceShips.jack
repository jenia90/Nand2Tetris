class SpaceShips
{
    field Player player;
    field Array enemies;
    static int nEnemies;

    constructor SpaceShips new()
    {
        let nEnemies = 8;
        let player = Player.new(200, 50);
        let enemies = Array.new(nEnemies);
        let enemies[0] = Enemy.new(50, 50, 1, 0, 5);
        let enemies[1] = Enemy.new(200, 150, 1, 2, 10);
        let enemies[2] = Enemy.new(150, 100, 0, 1, 15);
        let enemies[3] = Enemy.new(100, 150, 1, 1, 8);
        let enemies[4] = Enemy.new(250, 200, 3, 1, 4);
        let enemies[5] = Enemy.new(10, 160, 2, 4, 7);
        let enemies[6] = Enemy.new(350, 100, 1, 3, 8);
        let enemies[7] = Enemy.new(230, 90, 3, 1, 13);


        return this;
    }

    method void run()
    {
        var int i;
        var char key;
        var boolean quit;
        var int dir;
        var Enemy curr_ship;
        var String msg;
        let msg = String.new(11);
        let msg = "SPACE SHIPS";
        let quit = false;
        do Output.moveCursor(0, 26);
        do Output.printString(msg);

        while(~quit)
        {
            let key = Keyboard.keyPressed();
            let dir = 0;

            while (((key > 133) | (key < 130)) &
                   (~(key = 81)) & (~quit))
            {
                let key = Keyboard.keyPressed();
                let i = 0;
                while(i<nEnemies)
                {
                    let curr_ship = enemies[i];
                    do curr_ship.Move();
                    let i = i + 1;
                    do Sys.wait(5);
                    if (CheckCollision(player, curr_ship)) { let quit = true; }
                }
                do player.Move(dir);
                do Sys.wait(5);
            }

            if (key = 81)
            {
                let quit = true;
                let dir = 0;
                do Screen.clearScreen();
            }
            if(key = 133)
            {
                let dir = 1;
            }
            if (key = 131)
            {
                let dir = 2;
            }
            if (key = 130)
            {
                let dir = 3;
            }
            if (key = 132)
            {
                let dir = 4;
            }

            do player.Move(dir);
            do Sys.wait(5);

            let i = 0;
            while(i<nEnemies)
            {
                let curr_ship = enemies[i];
                do curr_ship.Move();
                if (CheckCollision(player, curr_ship))
                {
                    let quit = true;
                }
                let i = i + 1;
                do Sys.wait(5);
            }
        }

        do Screen.clearScreen();
        do Output.moveCursor(9, 26);
        do Output.printString("BYE!");

        return;
    }

    method void ClearLine(int i)
    {
        do Screen.clearScreen();
        do Output.moveCursor(0, 26);
        do Output.printString("SPACE SHIPS");
        do Output.moveCursor(i,0);

        return;
    }

    method boolean CheckCollision(Player p, Enemy e)
    {
        var boolean isColliding;
        var int dx,dy,dist, sqx,sqy;
        let isColliding = false;
        let dx = p.GetX() - e.GetX();
        let dy = p.GetY() - e.GetY();
        
        let sqx = (dx * dx);
        let sqy = (dy * dy);

        let dist = Math.sqrt(Math.abs(sqx + sqy));

        if(dist < 2) { let isColliding = true; }

        return isColliding;
    }

    method void dispose()
    {
        var int i;
        var Enemy curr_ship;
        let i = 0;
         
        while(i < nEnemies)
        {
            let curr_ship = enemies[i];
            do curr_ship.dispose();
        }

        do player.dispose();
        do Screen.clearScreen();
        do Memory.deAlloc(this);

        return;
    }
}