class Ship
{
    field int pos_x, pos_y, loc, last_dir;
    field boolean isEnemy;
    static int speed;
    static int size;
    static int memAddress;
    


    constructor Ship new(int x, int y, boolean enemy)
    {
        let pos_x = x;
        let pos_y = y;
        let speed = 1;
        let size = 5;
        let last_dir = 1;
        let isEnemy = enemy;
        
        if (isEnemy)
        {
            do DrawEnemyShip();
        }
        else
        {
            let loc = Math.multiply(pos_y, 63) + pos_x;
            do Move(0);
        }

        return this;
    }

    method void Move(int dir)
    {
        var int x, y, new_loc;

        if (~isEnemy)
        {
            if (~(dir = 0))
            {
                do EraseShip(loc);
                if(dir = 2)
                {
                    let pos_y = pos_y - speed;
                    let new_loc = Math.multiply(pos_y, 32) + pos_x;
                    do Ship.drawUp(new_loc);
                }
                if(dir = 1)
                {
                    let pos_y = pos_y + speed;
                    let new_loc = Math.multiply(pos_y, 32) + pos_x;
                    do Ship.drawDown(new_loc);
                }
                if(dir = 3)
                {
                    let pos_x = pos_x - speed;
                    let new_loc = Math.multiply(pos_y, 16) + pos_x;
                    do Ship.drawLeft(new_loc);
                }
                if(dir = 4)
                {
                    let pos_x = pos_x + speed;
                    let new_loc = Math.multiply(pos_y, 16) + pos_x;
                    do Ship.drawRight(new_loc);
                }
                let loc = new_loc;
            }
        }
        else
        {
            do EraseEnemyShip();
            if (dir = 1)
            {
                if (pos_y < 250)
                {
                    let pos_y = pos_y + 1;
                }
                else
                {
                    let pos_y = 16;
                }
            }
            if (dir = 2)
            {
                if (pos_y > 15)
                {
                    let pos_y = pos_y - 1;
                }
                else
                {
                    let pos_y = 250;
                }
            }
            if (dir = 3)
            {
                
                if (pos_x > 10)
                {
                    let pos_x = pos_x - 1;
                }
                else
                {
                    let pos_x = 506;
                }
            }
            if (dir = 4)
            {
                if (pos_x < 506)
                {
                    let pos_x = pos_x + 1;
                }
                else
                {
                    let pos_x = 10;
                }
            }
            do DrawEnemyShip();
        }

        return;
    }

    method Point GetPosition()
    {
        var Point p;
        let p = Point.new(pos_x, pos_y);

        return p;
    }

    method void DrawEnemyShip()
    {
        do Screen.setColor(true);
        do Screen.drawRectangle(pos_x, pos_y, pos_x + 5, pos_y + 5);

        return;
    }

    method void EraseEnemyShip()
    {
        do Screen.setColor(false);
        do Screen.drawCircle(pos_x, pos_y, size);

        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    function void drawLeft(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 15872);
        do Memory.poke(memAddress+96, -5760);
        do Memory.poke(memAddress+128, 13920);
        do Memory.poke(memAddress+160, -5736);
        do Memory.poke(memAddress+192, 13926);
        do Memory.poke(memAddress+224, -5735);
        do Memory.poke(memAddress+256, 13926);
        do Memory.poke(memAddress+288, -5736);
        do Memory.poke(memAddress+320, 13920);
        do Memory.poke(memAddress+352, -5760);
        do Memory.poke(memAddress+384, 15872);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void drawUp(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 256);
        do Memory.poke(memAddress+32, 640);
        do Memory.poke(memAddress+64, 640);
        do Memory.poke(memAddress+96, 1344);
        do Memory.poke(memAddress+128, 1344);
        do Memory.poke(memAddress+160, 2720);
        do Memory.poke(memAddress+192, 2720);
        do Memory.poke(memAddress+224, 5456);
        do Memory.poke(memAddress+256, 5456);
        do Memory.poke(memAddress+288, 10920);
        do Memory.poke(memAddress+320, 10920);
        do Memory.poke(memAddress+352, 13656);
        do Memory.poke(memAddress+384, 10920);
        do Memory.poke(memAddress+416, 16376);
        do Memory.poke(memAddress+448, 5456);
        do Memory.poke(memAddress+480, 5456);
        return;
    }

    function void drawRight(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 124);
        do Memory.poke(memAddress+128, 407);
        do Memory.poke(memAddress+160, 1644);
        do Memory.poke(memAddress+192, 6551);
        do Memory.poke(memAddress+224, 26220);
        do Memory.poke(memAddress+256, -26217);
        do Memory.poke(memAddress+288, 26220);
        do Memory.poke(memAddress+320, 6551);
        do Memory.poke(memAddress+352, 1644);
        do Memory.poke(memAddress+384, 407);
        do Memory.poke(memAddress+416, 124);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void drawDown(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 2728);
        do Memory.poke(memAddress+32, 2728);
        do Memory.poke(memAddress+64, 8188);
        do Memory.poke(memAddress+96, 5460);
        do Memory.poke(memAddress+128, 6828);
        do Memory.poke(memAddress+160, 5460);
        do Memory.poke(memAddress+192, 5460);
        do Memory.poke(memAddress+224, 2728);
        do Memory.poke(memAddress+256, 2728);
        do Memory.poke(memAddress+288, 1360);
        do Memory.poke(memAddress+320, 1360);
        do Memory.poke(memAddress+352, 672);
        do Memory.poke(memAddress+384, 672);
        do Memory.poke(memAddress+416, 320);
        do Memory.poke(memAddress+448, 320);
        do Memory.poke(memAddress+480, 128);
        return;
    }

    method void EraseShip(int location) 
    {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
}