// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an outAlu,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the voutAlue of this location. If the current instruction needs 
 * to write a voutAlue to M, the voutAlue is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any voutAlue may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new voutAlues only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M voutAlue input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M voutAlue output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1,
                           out[3]=d3, out[4]=d2, out[5]=d1,
                           out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1,
                           out[12]=ia, out[15]=selAC, out[0..14]=adrA);
    DMux(in=true, sel=selAC, a=aInstruct, b=cInstruct);
    
    //Set jump
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=j1, b=ng, out=JLT);
    And(a=j2, b=zr, out=JEQ);
    And(a=j3, b=pos, out=JGT);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=JMP);
    And(a=cInstruct, b=JMP, out=isJMP);
    
    //Set ARegister
    And(a=cInstruct, b=d1, out=computetoa);
    Mux16(a=instruction, b=outAlu, sel=computetoa, out=newa);
    Or(a=aInstruct, b=computetoa, out=loada);
    ARegister(in=newa, load=loada, out=aRegister);
    
    //Set DRegister
    And(a=d2, b=cInstruct, out=loadd);
    DRegister(in=outAlu, load=loadd, out=dRegister);
    
    //Set outAlu
    Mux16(a=aRegister, b=inM, sel=ia, out=aorm);
    ALU(x=dRegister, y=aorm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outAlu, zr=zr, ng=ng);
    
    And16(a=outAlu, b=true, out=outM);    
    And16(a=aRegister, b=true, out[0..14]=addressM);
    And(a=d3, b=cInstruct, out=writeM);
    PC(in=aRegister, load=isJMP, inc=true, reset=reset, out[0..14]=pc);
}