/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
    And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1,
                           out[3]=d3, out[4]=d2, out[5]=d1,
                           out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1,
                           out[12]=ia, out[15]=selAC, out[0..14]=adrA);
    DMux(in=true, sel=selAC, a=aInstruct, b=cInstruct);
    
    //Set jump
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=j1, b=ng, out=JLT);
    And(a=j2, b=zr, out=JEQ);
    And(a=j3, b=pos, out=JGT);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=JMP);
    And(a=cInstruct, b=JMP, out=isJMP);
    
    //Set ARegister
    And(a=cInstruct, b=d1, out=computetoa);
    Mux16(a=instruction, b=outAlu, sel=computetoa, out=newa);
    Or(a=aInstruct, b=computetoa, out=loada);
    ARegister(in=newa, load=loada, out=aRegister);
    
    //Set DRegister
    And(a=d2, b=cInstruct, out=loadd);
    DRegister(in=outAlu, load=loadd, out=dRegister);
    
    //Set outAlu
    Mux16(a=aRegister, b=inM, sel=ia, out=aorm);
    ExtendAlu(x=dRegister, y=aorm, instruction=instruction[6..14], out=outAlu, zr=zr, ng=ng);
    
    And16(a=outAlu, b=true, out=outM);    
    And16(a=aRegister, b=true, out[0..14]=addressM);
    And(a=d3, b=cInstruct, out=writeM);
    PC(in=aRegister, load=isJMP, inc=true, reset=reset, out[0..14]=pc);
}
