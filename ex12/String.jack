// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int length, MAX_LEN;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        if(maxLength < 0)
        {
            do Sys.error(14);
        }
        if(maxLength = 0)
        {
            let maxLength = 1;
        }
        let s = Array.new(maxLength);
        let length = 0;
        let MAX_LEN = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
        do s.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() { return length; }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
        let s[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int result, i;
        var boolean neg;
        let result = 0;
        let neg = false;
        let i = 0;
        
        // in case our string represents a negative number
        if((length > 0) & (s[0] = 45)) 
        {
            let neg = true;
            let i = 1;
        }

        while((i < length) & (s[i] > 47) & (s[i] < 58))
        {
            let result = (result * 10) + (s[i] - 48);
            let i = i + 1;
        }
        if(neg)
        {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val)
    {
        let length = 0;
        if(val < 0)
        {
            do appendChar(45);
            let val = -val;
        }
        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val)
    {
        var int lastDigit, tenth;
        var chat c;
        let tenth = val / 10;
        let lastDigit = val - (tenth * 10);
        let c = lastDigit + 48;
        if(val < 10)
        {
            do appendChar(c);
        }
        else
        {
            do setIntHelper(tenth);
            do appendChar(c);
        }
        return;

    }

    /** Returns the new line character. */
    function char newLine() { return 128; }

    /** Returns the backspace character. */
    function char backSpace() { return 129; }

    /** Returns the double quote (") character. */
    function char doubleQuote() { return 34; }
}
