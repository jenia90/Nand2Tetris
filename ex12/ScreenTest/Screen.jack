// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen 
{
    static boolean color;
    static Array masks, screen;
    static int baseAddress;

    /** Initializes the Screen. */
    function void init() 
    {
        let masks = Array.new(16);
        let masks[0] = 1;
        let masks[1] = 2;
        let masks[2] = 4;
        let masks[3] = 8;
        let masks[4] = 16;
        let masks[5] = 32;
        let masks[6] = 64;
        let masks[7] = 128;
        let masks[8] = 256;
        let masks[9] = 512;
        let masks[10] = 1024;
        let masks[11] = 2048;
        let masks[12] = 4096;
        let masks[13] = 8192;
        let masks[14] = 16384;
        let masks[15] = 16384 + 16384;

        let color = true;
        let screen = 16384;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() 
    {
        var int i;
        let i = 0;
        while (i < 8192)
        {
            let screen[i] = 0;
            let i = i + 16;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) 
    {
        var int bit, address, value;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) 
        {
            do Sys.error(7); // Screen.drawPixel: Illegal pixel coordinates
        }

        let bit = Screen.mod(x, 16); // col % 16
        let address = (y * 32) + (x / 16);
        let value = screen[address];

        if (color)
        {  // black
            let value = value | masks[bit];
        } 
        else 
        {      // white
            let value = value & ~masks[bit];
        }

        let screen[address] = value;

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int a, b, a_inc, b_inc, dx, dy, moveTo, temp, start;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
            (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) 
        {
            do Sys.error(8); // Screen.drawLine: Illegal line coordinates
        }

        let a = 0;
        let b = 0;

        if (~(x1 < x2)) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy < 0) 
        {
            let b_inc = -1;
        } 
        else 
        {
            let b_inc = 1;
        }

        if (dy = 0) 
        {
            do Screen.drawHorizontalLine(x1, y1, dx);
            return;
        }

        if (dx = 0) 
        {
            while (~(b = dy)) 
            {
                let b = b + b_inc;
                do Screen.drawPixel(x1, y1 + b);
            }

            return;
        }

        while ((a < dx) & (b < dy)) 
        {
            let moveTo = (a * dy) - (b * dx);

            if (moveTo < 0) 
            {
                let a = a + 1;
            } 
            else 
            {
                let b = b + 1;
            }

            do Screen.drawPixel(x1 + a, y1 + b);
        }

        while ((a < dx) & (b > dy)) 
        {
            let moveTo = (a * dy) - (b * dx);

            if (moveTo > 0) 
            {
                let a = a + 1;
            } 
            else 
            {
                let b = b - 1;
            }

            do Screen.drawPixel(x1 + a, y1 + b);
        }

        return;
    }

    /**
     * Given a starting coordinates and length draws a horizontal line.
     */
    function void drawHorizontalLine(int x, int y, int len)
    {
        var int a;

        let a = 0;
        while (~(a = len)) 
        {
            do Screen.drawPixel(x + a, y);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int currentRow, dy, dx, y;

        let currentRow = 0;
        let dy = Math.abs(y2 - y1);
        let dx = x2 - x1;

        while (currentRow < dy) 
        {
            let y = y1 + currentRow;
            do Screen.drawHorizontalLine(x1, y, dx);
            let currentRow = currentRow + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) 
    {
        var int dy, sqrt, x1, x2, y;
        let dy = -r;
        
        while(~(dy = r))
        {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            let x1 = cx - sqrt;
            let x2 = cx + sqrt;
            let y = cy + dy;
            do Screen.drawLine(x1, y, x2, y);
            let dy = dy + 1;
        }
        return;
    }

    function int mod(int x, int m)
    {
        return x - ((x / m) * m);
    }
}
