// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory 
{
    static Array ram, heap, freeList;
    static int HEAP_BASE, HEAP_LAST, HEAP_LEN, 
               NEXT, LENGTH, MALLOC_LEN;
    /** Initializes the class. */
    function void init() 
    {
        let ram = 0;
        let HEAP_BASE = 2048;
        let HEAP_LAST = 16384;
        let HEAP_LEN = 14336;
        let LENGTH = 0;
        let NEXT = 1;
        let heap = HEAP_BASE;
        let freeList = HEAP_BASE;
        let heap[LENGTH] = HEAP_LEN;
        let heap[NEXT] = null;
        let MALLOC_LEN = -1;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
    {
        // Get best fit block
        var Array current, best, next, res;
        var int bSize, cSize; // sizes of best so far block and current block
        
        // find the next free block using the best fit alogrithm.
        let best = null;
        let bSize = HEAP_LEN;
        let current = freeList;

        if (current[NEXT] = null) { let best = current; }

        while(~(current = null))
        {
            let cSize = current[LENGTH] - 1;
            if(~(current < size) & (cSize < bSize))
            {
                let best = current;
                let bSize = cSize;
            }
            let current = current[NEXT];
        }
        let res = best + 1;
        
        // if the block is not empty
        if(~(best = null))
        {
            // Check if we need just part of the block or the whole block.
            if (best[LENGTH] > (size + 3))
            {
                let next = best + size + 1;
                let next[NEXT] = best[NEXT];
                let next[LENGTH] = best[LENGTH] - size - 1;
                let res[MALLOC_LEN] = size + 1;
                let freeList = next;
            }
            else
            {
                let next = best[NEXT];
                let res[MALLOC_LEN] = best[LENGTH];
            }
            let best = next;
        }

        return res;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        var Array prev, next;
        var int size;
        let size = o[MALLOC_LEN];
        let o = o - 1;

        // first, find if there's a place where we can append the freed
        // block in the freeList.
        // we try at first to append\link it to an existing block in
        // the freeList. If we can't find such block, we place the frred
        // block as the list head.
        if(freeList > size)
        {
            let prev = null;
        }
        let prev = freeList;
        while(~(prev[NEXT] = null) & (prev[NEXT] < o))
        {
            let prev = prev[NEXT];
        }
        
        // if freed block is no the head of the list we update 
        // the stats and params of the list accordingly.
        if(prev = null)
        {
            let o[LENGTH] = size;
            let o[NEXT] = freeList;
            let freeList = o;
        }
        else // else update the block we append to.
        {
            if((prev + prev[LENGTH]) = o)
            {
                let prev[LENGTH] = prev[LENGTH] + size;
                let o = prev;
            }
            else
            {
                let o[LENGTH] = size;
                let o[NEXT] = prev[NEXT];
                let prev[NEXT] = o;
            }
        }

        // lastly, we check if there's another block we can merge with.
        if((o + o[LENGTH]) = o[NEXT])
        {
            let next = o[NEXT];
            let o[LENGTH] = o[LENGTH] + next[LENGTH];
            let o[NEXT] = next[NEXT];
        }

        return;
    }
}
